heat_template_version: newton

# NOTE: You don't need to pass the parameter explicitly from the
# parent template, it can be specified via the parameter_defaults
# in the resource_registry instead, if you want to override the default
# and/or share values with other templates in the tree.
parameters:
  extra_username:
    type: string
    default: extrauser
  NetConfigDataLookup:
    type: json
    default: {}
    description: per-node configuration map


description: >
  Sets root password and runs wipe-disk.sh on the ceph nodes

resources:
  userdata:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: user_config}
      - config: {get_resource: wipe_disk}
      - config: {get_resource: password_reset}
      - config: {get_resource: OsNetConfigMappings}
      - config: {get_resource: Fencekeys}

  user_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        ssh_pwauth: True
        disable_root: false
        chpasswd:
          list: |
            root:redhat
            expire: False
  wipe_disk:
    type: OS::Heat::SoftwareConfig
    properties:
      config: {get_file: /home/stack/templates/firstboot/wipe-disk.sh}

  password_reset:
    type: OS::Heat::SoftwareConfig
    properties:
      config: {get_file: /home/stack/templates/firstboot/password.sh}

  Fencekeys:
    type: OS::Heat::SoftwareConfig
    properties:
      config: {get_file: /home/stack/templates/firstboot/virsh-fence-key.sh}


  OsNetConfigMappings:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: |
            #!/bin/sh
            eth_addr=$(cat /sys/class/net/*/address | tr '\n' ',')
            mkdir -p /etc/os-net-config

            # Create an os-net-config mapping file, note this defaults to
            # /etc/os-net-config/mapping.yaml, so we use that name despite
            # rendering the result as json
            echo '$node_lookup' | python -c "
            import json
            import sys
            import copy
            from subprocess import PIPE, Popen
            import yaml

            def write_mapping_file(interface_mapping):
              with open('/etc/os-net-config/mapping.yaml', 'w') as f:
                yaml.safe_dump(interface_mapping, f,  default_flow_style=False)

            input = sys.stdin.readline() or '{}'
            data = json.loads(input)
            for node in data:
              interface_mapping = {'interface_mapping':
                                      copy.deepcopy(data[node])}
              if 'dmiString' in interface_mapping['interface_mapping']:
                del interface_mapping['interface_mapping']['dmiString']
              if 'id' in interface_mapping['interface_mapping']:
                del interface_mapping['interface_mapping']['id']
              # Match on mac addresses first
              if any(x in '$eth_addr'.split(',') for x in data[node].values()):
                write_mapping_file(interface_mapping)
                break
              # If data contain dmiString and id keys, try to match node(group)
              if 'dmiString' in data[node] and 'id' in data[node]:
                ps = Popen([ 'dmidecode',
                             '--string', data[node].get('dmiString') ],
                             stdout=PIPE)
                out, err = ps.communicate()
                if data[node].get('id') == out.rstrip():
                  write_mapping_file(interface_mapping)
                  break
            "
          params:
            $node_lookup: {get_param: NetConfigDataLookup}
outputs:
  # This means get_resource from the parent template will get the userdata, see:
  # http://docs.openstack.org/developer/heat/template_guide/composition.html#making-your-template-resource-more-transparent
  # Note this is new-for-kilo, an alternative is returning a value then using
  # get_attr in the parent template instead.
  OS::stack_id:
    value: {get_resource: userdata}
