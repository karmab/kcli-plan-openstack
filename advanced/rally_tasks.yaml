{% set flavor_name = flavor_name or "m1.tiny" %}
{% set image_name = image_name or "cirros" %}
{% set network_name = network_name or "external" %}
{% set availability_zone = availability_zone or "nova" %}
---
  Authenticate.validate_neutron:
    -
      args:
        repetitions: 2
      runner:
        type: "constant"
        times: 10
        concurrency: 5
      sla:
        failure_rate:
          max: 0


  Authenticate.validate_nova:
    -
      args:
        repetitions: 2
      runner:
        type: "constant"
        times: 10
        concurrency: 5
      sla:
        failure_rate:
          max: 0

  NovaSecGroup.create_and_update_secgroups:
    -
      args:
        security_group_count: 3
      runner:
        type: "constant"
        times: 1
        concurrency: 1
      sla:
        failure_rate:
          max: 0

  NovaKeypair.boot_and_delete_server_with_keypair:
    -
      args:
        flavor:
            name: "{{flavor_name}}"
        image:
            name: "{{image_name}}"
        boot_server_kwargs: {}
      runner:
        type: "constant"
        times: 2
        concurrency: 2
      sla:
        failure_rate:
          max: 0

  NovaSecGroup.boot_and_delete_server_with_secgroups:
    -
      args:
        flavor:
            name: "{{flavor_name}}"
        image:
            name: "{{image_name}}"
        security_group_count: 2
        rules_per_security_group: 2
      runner:
        type: "constant"
        times: 2
        concurrency: 2
      context:
        network:
          start_cidr: "100.1.0.0/26"
      sla:
        failure_rate:
          max: 0

  NovaServers.boot_server_associate_and_dissociate_floating_ip:
    -
      args:
        flavor:
            name: "{{flavor_name}}"
        image:
            name: "{{image_name}}"
      runner:
        type: "constant"
        times: 2
        concurrency: 1
      context:
        network: {}
      sla:
        failure_rate:
          max: 0




  NeutronNetworks.create_and_delete_floating_ips:
    -
      args:
        floating_network: "{{network_name}}"
        floating_ip_args: {}
      runner:
        type: "constant"
        times: 2
        concurrency: 1
      context:
        quotas:
          neutron:
            floatingip: -1
      sla:
        failure_rate:
          max: 0


  NeutronNetworks.create_and_show_network:
    -
      args:
        network_create_args: {}
      runner:
        type: "constant"
        times: 2
        concurrency: 1
      context:
        quotas:
          neutron:
            network: -1
      sla:
        failure_rate:
          max: 0


  NeutronNetworks.create_and_list_routers:
    -
      args:
        network_create_args: {}
        subnet_create_args: {}
        subnet_cidr_start: "1.1.0.0/30"
        subnets_per_network: 2
        router_create_args: {}
      runner:
        type: "constant"
        times: 5
        concurrency: 1
      context:
        network: {}
        quotas:
          neutron:
            network: -1
            subnet: -1
            router: -1
      sla:
        failure_rate:
          max: 0


  NeutronNetworks.create_and_list_ports:
    -
      args:
        network_create_args: {}
        port_create_args: {}
        ports_per_network: 5
      runner:
        type: "constant"
        times: 5
        concurrency: 1
      context:
        network: {}
        quotas:
          neutron:
            network: -1
            port: -1
      sla:
        failure_rate:
          max: 0


  CinderVolumes.create_and_attach_volume:
    -
      args:
          size: 1
          image:
            name: "{{image_name}}"
          flavor:
            name: "{{flavor_name}}"
          create_volume_params:
            availability_zone: "{{availability_zone}}"
      runner:
        type: "constant"
        times: 2
        concurrency: 1
      sla:
        failure_rate:
          max: 0


  CinderVolumes.create_and_delete_snapshot:
    -
      args:
          force: false
      runner:
        type: "constant"
        times: 2
        concurrency: 1
      context:
        volumes:
          size: 1
      sla:
        failure_rate:
          max: 0


  CinderVolumes.create_and_delete_volume:
    -
      args:
        size: 1
        image:
            name: "{{image_name}}"
      runner:
        type: "constant"
        times: 2
        concurrency: 1
      sla:
        failure_rate:
          max: 0

